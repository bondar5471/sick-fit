{"version":3,"file":"static/webpack/static/development/pages/_app.js.c09ce970a40c0f3e35a6.hot-update.js","sources":["webpack:///./components/Search.js"],"sourcesContent":["import React from 'react'\nimport Downshift from \"downshift\"\nimport Router from 'next/router'\nimport { ApolloConsumer } from 'react-apollo'\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce'\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown'\n\nconst SEARCH_ITEM_QUERY = gql`\n  query SEARCH_ITEM_QUERY($searchTerm: String!) {\n    items(where: {\n      OR: [\n        { title_contains: $searchTerm },\n        { description_contains: $searchTerm }\n      ]     \n    }) {\n      id\n      title\n      image\n    }\n  }\n  `\nfunction routeToItem(item) {\n  console.log(item)   \n}  \n\nclass AutoComplete extends React.Component {\n  state = {\n    items: [],\n    loading: false\n  }\n  \n  onChange = debounce(async (e, client) => {\n    this.setState({loading: true})\n    const res = await client.query({\n      query: SEARCH_ITEM_QUERY,\n      variables: { searchTerm: e.target.value }\n    })\n    this.setState({\n      items: res.data.items,\n      loading: false\n    })\n  }, 350)\n  render() {\n    return (\n      <SearchStyles>\n        <Downshift onChange={routeToItem} itemToString={item => (item === null ? ''\n        : item.title)}>\n          {({getInputProps, getItemProps, isOpen, inputValue, highlightedIndex}) => (\n            <div>\n            <ApolloConsumer>\n              {(client) => (\n                <input  \n                {...getInputProps({\n                  type: \"search\",\n                  placeholder: \"Search\",\n                  id: \"search\",\n                  className: this.state.loading ?\n                    'loading' : '',\n                  onChange: \n                    e => {\n                    e.persist()\n                    this.onChange(e, client)\n                  }\n                })}\n                />\n              )}\n            </ApolloConsumer>\n            { isOpen && (\n              <DropDown>\n              {this.state.items.map((item, index) => (\n                <DropDownItem {...getItemProps({item})} key={item.id} highlighted={index === highlightedIndex}>\n                 <img width=\"50\" src={item.image} alt={item.title} />\n                 {item.title}\n               </DropDownItem>\n              ))}\n              </DropDown>\n            )}\n          </div>\n        )}\n        </Downshift>\n    </SearchStyles>\n    )\n  }\n}\n\nexport default AutoComplete"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AACA;AAHA;AAEA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAVA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAtBA;AAmCA;;;;AAzDA;AACA;AA2DA;;;;A","sourceRoot":""}